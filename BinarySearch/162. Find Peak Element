/*
Brute Force
TC = O(n)... using for loop 
SC = O(1)
Beasts 100% in runtime XDXDXD
*/
class Solution {
public:
    int findPeakElement(vector<int>& nums) {
    
        int n = nums.size();
        if(n==1)return 0;
        if(nums[0]>nums[1])return 0;
        if(nums[n-1]>nums[n-2])return n-1;

        for(int i = 1; i<n-1; i++){
            if(nums[i-1]<nums[i] && nums[i]>nums[i+1])
            {
                return i;
            }
        }
        return -1;
    
    }
};

/*
Pure BS
time comp = O(lonN)
algo:
sabse pehle toh corner element check karlo
then we will do binary search excluding first and last index
if(mid is peak)return mid
else if mid < mid+1, meaning mid is on increasing side of mountain, mid will definetly be on right
else if mid > mid-1, meaning mid is on decreasing side of mountain, mid will definetly be on left
*/
class Solution {
public:
    int findPeakElement(vector<int>& nums) {
    
        int n = nums.size();
        if(n==1)return 0;
        if(nums[0]>nums[1])return 0;
        if(nums[n-1]>nums[n-2])return n-1;

        int left  = 1;
        int right = n-1;

        while(left <=right)
        {
            int mid = left+(right-left)/2;

            if(nums[mid-1]<nums[mid] && nums[mid]>nums[mid+1])
            {
                return mid;
            }
            //mid is in increasing part of array
            //fir ans toh right mei hi milega
            else if(nums[mid]<nums[mid+1]){
                left= mid+1;
            }
            //mid is in decreasing part of array
            //fir ans toh left mei hi milega
            else if(nums[mid-1]>nums[mid]){
                right = mid-1;
            }

        }
        return -1;
    
    }
};



/*
most optimal BS O(logN)
here we have considered first and last element 
rest every ting is same as previous approach
just one change:
if mid is first or last element
say first element, we compaire it with 2nd element, if peak we return it else start = mid+1; 
say last element we compaire it with 2nd last element, if peak we return it else end = mid-1; 
*/
class Solution {
public:
    int findPeakElement(vector<int>& nums) {
        
        if(nums.size()==1)return 0;

        if(nums.size()==2)
        {
            if(nums[0]>nums[1])return 0;
            else return 1;
        }
        
        int start = 0;
        int end = nums.size()-1;

        while(start<=end)
        {
            int mid = start + (end-start)/2;

            if( mid>0 && mid<nums.size()-1 )
            {
                if(nums[mid] > nums[mid-1] && nums[mid] > nums[mid+1])
                {
                    return mid;
                }


                if(nums[mid]<nums[mid+1])
                {
                    start=mid+1;
                }
                else
                {
                    end = mid-1;
                }
            }
            else if(mid == 0)
            {
                if(nums[mid] > nums[mid+1]){
                    return mid;
                }else{
                    start = mid+1;
                }
            }
            else
            {
               if(nums[mid-1] < nums[mid]){
                    return mid;
                }else{
                    end = mid-1;
                }
            }
        }
        return -1;
    }
};
